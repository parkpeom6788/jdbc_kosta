**03-jdbc-ProductDAO**

-SQL : 데이터베이스를 정의,조작,제어 하기 위한 언어
	DDL (데이터 정의어 : create , drop , alter )
	DML (데이터 조작어 : crud - insert(create) , select (read) , update , delete
	DCL (데이터 제어어 : grant , revoke )
	TCL (트랜잭션 제어어 : commit , rollback )
	
- JDBC : Java DataBase Connectivity 
			자바 어플리케이션과 데이터베이스 연동을 위한 기술 
			
			표준을 제안하는 측 ( Sun , 이후 Oracle ) 에서
			정의한 JDBC Interface 
			를 각 데이터베이스 회사에서 구현 implements 한 Driver jar 를
			개발 환경에 추가해야 한다
			
			Java Application <--> JDBC Interface
											JDBC Oracle Driver jar <--> Database
											JDBC MySql Driver jar
											..
			사용자 측 <--> 운전법
						현대	폭스바갠	테슬라 운전대 <--> 각 회사의 자동차들
			계층구조 형성을 통한 다형성을 지원
			
			하나의 소통방식으로
			다양한 객체들을
			각자의 방식으로 동작하게 할 수 있다 
						
			하나의 JDBC 소통방식으로
			다양한 데이터베이스들을
			각자의 방식으로 동작하게 할 수 있다
			
			-JDBC 주요 Interface 들 											
											
			Interface : 다양한 계층 구조 형성을 통한 다형성 적용
			주로 static final 상수와 abstract class로 구성 
			jdk 1.8 이상 default 와 static 구현 method 이용
			
			-> 소통 방식 , 표준화된 사용법 
		-Connection : 자바 응용프로그램과 데이터베이스 연결 정보를 가지고 있는 객체의 인터페이스
					오라클 컨넥션 , DB2 컨넥션 , MariaDB 커넥션과 같은 다양한 객체들의
					상위 인터페이스
					자바 개발 그룹에서는 Connection 인터페이스(사용법)을 이용하면
					다양한 db의 컨넥션 객체를 제어할 수 있다
					
					(요청될때마다 커넥션해야함) 
					
					코드 예 ) Connection con = DrvierManager.getConnection(dbURL,username,userpassword);
						// jdbc Connection Interface 타입의 abstract method 인 preparedStatement 를
						// 사용하면 다양한 db의 구현된 prepareStatement() 가 동작한다 
						preparedStatement pstmt = con.prepareStatement(sql);
						다양한 데이터베이스를 하나의 방식으로 제어하기 위해서 -> 다형성
						
		- PreparedStatement
					자바 어플리케이션에서 데이터베이스에 SQL 언어로 명령하기 위한 객체
					기존 Statement 보다 생산성 및 보안성과 높은 성능을 가지므로 주로 PreparedStatement를 이용한다
					
					코드 예 )
						String sql = "select name,address from member where id =? and password = ?";
						PreparedStatement pstmt = con.prepareStatement(sql);
						pstmt.setString(1,"java"); // 첫번째 물음표에 검색 아이디를 할당 
						pstmt.setString(2,"a"); // 두번째 물음표에 패스워드 ㅏㅇ이디를 할당
						// 만약 컬럼의 타입이 number 형이라고 한다면 pstmt.setInt(3,500);과 같이 사용할 수 있다
						
						// 조회시 select
						ResultSet rs = pstmt.executeQuery()
						;
						//등록 , 삭제 , 수정 시 insert , delete , update
						int rowNumber = pstmt.executeUpdate();												
		- ResultSet : 조회 결과의 집합 			
						Select SQL 실행 후 조회 결과에 대한 정보 
						(Select SQL 실행 후 조회 결과에 대한 정보 를 저장하는 객체의 상위 인터페이스 타입)		
						ex) // 조회시 select
						ResultSet rs = pstmt.executeQuery(); 
						// 조회 결과 행을 확인하기 위해서는 반드시 next() 한번은 호출 해야 한다
						if(rs.next()) { // 다음 결과 행이 존재하면 true , 아니면 false 
							String name = rs.getString(1); // select sql 의 컬럼 순서 1부터 시작
							// String name = rs.getString("name"); //  컬럼 순서 대신 컬럼명으로도 가능
							// 만약 정수형이라면 int price = rs.getInt(3); //  타입에 따른 getter를 실행하면 됨 	
						}
			JDBC 프로그래밍 개발 단계
			1) SELECT 할 때
				JDBC Driver Loading ( jdk1.6 이상에서는 생략 가능 ) 
				Connection
				PreparedStatement -> executeQuery();
				ResultSet
				close		
			
			2) INSERT , DELETE , UPDATE
				JDBC Driver loading
				Connection
				PreparedStatement -> executeUpdate()
				close
			
			- DAO , VO , DTO , Service
			
			DAO : Data Access Object 데이터베이스 연동 로직 정의 객체
			VO : Value Object 값을 저장하고 표현하기 위한 객체
			DTO : Data Transfer Object 계층간 데이터 이동을 위한 객체
			Service : 비즈니스 로직을 정의하는 객체 , 트랜잭션 처리 담당 객체
			
			
			
			
			 
			
			
			
									
				